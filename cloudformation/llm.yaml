AWSTemplateFormatVersion: '2010-09-09'
Description: 'WGA LLM Service CloudFormation Template'

Parameters:
  Environment:
    Type: String
    Description: The deployment environment

  McpImageUri: # << 추가됨
    Type: String
    Description: ECR URI for MCP Lambda Docker image

  ApiGatewayId:
    Type: String
    Description: API Gateway ID

  ApiGatewayRootResourceId:
    Type: String
    Description: API Gateway Root Resource ID

  FrontendRedirectDomain:
    Type: String
    Description: The domain for frontend redirection

  KnowledgeBaseIdParameter:
    Type: String
    Description: Bedrock Knowledge Base ID

Resources:
  McpLambdaFunction: 
    Type: AWS::Lambda::Function  # << 여기 추가됨
    Properties:
      FunctionName: !Sub 'wga-mcp-${Environment}'
      PackageType: Image
      Code:
        ImageUri: !Ref McpImageUri
      Role: !GetAtt LlmLambdaExecutionRole.Arn
      Timeout: 120
      MemorySize: 2048
      Environment:
        Variables:
          ENV: !Ref Environment
          ATHENA_TABLE_REGISTRY_TABLE: !Sub 'AthenaTableRegistry-${Environment}'

  # Function URL 호출 권한 추가
  McpLambdaPermissionFunctionUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref McpLambdaFunction
      Action: 'lambda:InvokeFunctionUrl'
      Principal: '*'
      FunctionUrlAuthType: NONE

  McpLambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt McpLambdaFunction.Arn
      AuthType: NONE

  LlmLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wga-llm-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionAndBedrockInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - cloudwatch:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - bedrock:*
                  - cloudtrail:*
                  - xray:*
                  - autoscaling-plans:*
                  - ec2:*
                  - health:*
                  
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:*
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/wga/${Environment}/*"

  LlmLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'llm-layer-${Environment}'
      Description: Common Python dependencies
      Content:
        S3Bucket: !Sub 'wga-deployment-${Environment}'
        S3Key: !Sub 'layers/common-layer-${Environment}.zip'
      CompatibleRuntimes:
        - python3.12

  LlmLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'wga-llm-${Environment}'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Sub 'wga-deployment-${Environment}'
        S3Key: !Sub 'llm/llm-lambda-${Environment}.zip'
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LlmLambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: !Ref Environment
          ATHENA_TABLE_REGISTRY_TABLE: !Sub 'AthenaTableRegistry-${Environment}'
      Layers:
        - !Ref LlmLambdaLayer
      Tags:
        - Key: Environment
          Value: !Ref Environment

  LlmApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: 'llm1'

  LlmMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref LlmApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LlmLambdaFunction.Arn}/invocations'

  LlmOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref LlmApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY  # MOCK에서 AWS_PROXY로 변경
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LlmLambdaFunction.Arn}/invocations'

  LlmLambdaPermissionForOptions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LlmLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/OPTIONS/llm1'

  LlmLambdaPermissionForLlm1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LlmLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/POST/llm1'

  Llm2ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: 'llm2'

  Llm2Method:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref Llm2ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LlmLambdaFunction.Arn}/invocations'

  LlmLambdaPermissionForLlm2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LlmLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/POST/llm2'

  HealthApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: 'health'

  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref HealthApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LlmLambdaFunction.Arn}/invocations'

  LlmLambdaPermissionForHealth:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LlmLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/GET/health'
